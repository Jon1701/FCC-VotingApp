// Create, sign, verify JSON web tokens.
const jwt = require('jsonwebtoken');

// Log requests to console.
const morgan = require('morgan');

////////////////////////////////////////////////////////////////////////////////
//
// Express
//
////////////////////////////////////////////////////////////////////////////////
const express = require('express');
const app = express();

// Use morgan to log requests to console.
app.use(morgan('dev'));

// Gets parameters from requests.
const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

////////////////////////////////////////////////////////////////////////////////
//
// Mongoose and database connection
//
////////////////////////////////////////////////////////////////////////////////

// Get username, password, and database name.
const dbConfig = {
  username: process.env['DBUSER'],
  password: process.env['DBPASSWORD'],
  database: process.env['DBNAME'],
  domain: 'ds111178.mlab.com',
  port: 11178
}

// Database connection string.
const dbConnectionString = 'mongodb://' + dbConfig.username + ':' + dbConfig.password + '@' + dbConfig.domain + ':' + dbConfig.port + '/' + dbConfig.database;

// Connect to the database.
const mongoose = require('mongoose');
mongoose.connect(dbConnectionString);

////////////////////////////////////////////////////////////////////////////////
// Routes.
////////////////////////////////////////////////////////////////////////////////
app.post('/signup', (req, res) => {
  console.log(req.body)
  return res.send(req.body);
});

////////////////////////////////////////////////////////////////////////////////
// Serve files from the ./dist folder.
////////////////////////////////////////////////////////////////////////////////
app.use(express.static('dist'));

////////////////////////////////////////////////////////////////////////////////
// Route to handle errors.
////////////////////////////////////////////////////////////////////////////////
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

////////////////////////////////////////////////////////////////////////////////
// Server.
////////////////////////////////////////////////////////////////////////////////
const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log('Listening for connections on PORT ' + port);
});
